#!/usr/bin/env python2.7
from GRAViTy.UcfVirusAnnotator import UcfVirusAnnotator
from GRAViTy.Utilities.str2bool import str2bool
from GRAViTy.Utilities.CheckInput import check_FILEPATH, check_POSINTEGER, check_NONNEGINTEGER, check_POS, check_NONNEG
import optparse, os, multiprocessing

import textwrap
class IndentedHelpFormatterWithNL(optparse.IndentedHelpFormatter):
	def format_description(self, description):
		if not description: return ""
		desc_width = self.width - self.current_indent
		indent = " "*self.current_indent
		# the above is still the same
		bits = description.split('\n')
		formatted_bits = [
			textwrap.fill(bit,
				desc_width,
				initial_indent=indent,
				subsequent_indent=indent)
			for bit in bits]
		result = "\n".join(formatted_bits) + "\n"
		return result
	
	def format_option(self, option):
		# The help for each option consists of two parts:
		#	 * the opt strings and metavars
		#	 eg. ("-x", or "-fFILENAME, --file=FILENAME")
		#	 * the user-supplied help string
		#	 eg. ("turn on expert mode", "read data from FILENAME")
		#
		# If possible, we write both of these on the same line:
		#	 -x		turn on expert mode
		#
		# But if the opt string list is too long, we put the help
		# string on a second line, indented to the same column it would
		# start in if it fit on the first line.
		#	 -fFILENAME, --file=FILENAME
		#			 read data from FILENAME
		result = []
		opts = self.option_strings[option]
		opt_width = self.help_position - self.current_indent - 2
		if len(opts) > opt_width:
			opts = "%*s%s\n" % (self.current_indent, "", opts)
			indent_first = self.help_position
		else: # start help on same line as opts
			opts = "%*s%-*s	" % (self.current_indent, "", opt_width, opts)
			indent_first = 0
		result.append(opts)
		if option.help:
			help_text = self.expand_default(option)
			# Everything is the same up through here
			help_lines = []
			for para in help_text.split("\n"):
				help_lines.extend(textwrap.wrap(para, self.help_width))
			# Everything is the same after here
			result.append("%*s%s\n" % (
				indent_first, "", help_lines[0]))
			result.extend(["%*s%s\n" % (self.help_position, "", line)
				for line in help_lines[1:]])
		elif opts[-1] != "\n":
			result.append("\n")
		return "".join(result)

def main():
	parser = optparse.OptionParser(	usage="usage: %prog [options]",
					version="%prog 1.1.0",
					formatter = IndentedHelpFormatterWithNL())
	
	parser.add_option(	'--GenomeSeqFile_UcfVirus',
				dest	= "GenomeSeqFile_UcfVirus",
				help	= "Full path to the genome sequence GenBank file of unclassified viruses",
				metavar	= "FILEPATH",
				type	= "string",
				action	= "callback",
				callback= check_FILEPATH,
	)
	parser.add_option(	'--ShelveDir_UcfVirus',
				dest	= "ShelveDir_UcfVirus",
				help	= "Full path to the shelve directory of unclassified viruses.",
				metavar	= "DIRECTORYPATH",
				type	= "string",
	)
	
	parser.add_option(	'--ShelveDirs_RefVirus',
				dest	= "ShelveDirs_RefVirus",
				help	= "Full path(s) to the shelve director(y/ies) of reference virus(es). "
					  "For example: 'path/to/shelve/ref1, path/to/shelve/ref2, ...'",
				metavar	= "DIRECTORYPATH",
				type	= "string",
	)
	VirusAnnotationGroup 	= optparse.OptionGroup(	parser		= parser,
							title		= "Unclassified virus annotation options",
							description	= "Virus genomes are 6-framed translated and are scanned against the reference PPHMM database(s), using HMMER (hmmscan). "
									  "Two types of information are collected: PPHMM hit scores (PPHMM signatures) and hit locations (PPHMM LOCATION signatures). ")
	VirusAnnotationGroup.add_option('--IncludeIncompleteGenomes_UcfVirus',
					dest	= "IncludeIncompleteGenomes_UcfVirus",
					default	= True,
					help	= "Analyse all unclassified viruses using reference PPHMM database(s) if True, otherwise only complete genomes. [default: %default]",
					metavar	= "BOOLEAN",
					type	= "choice",
					choices	= ["True", "False",],
	)
	VirusAnnotationGroup.add_option('--IncludeIncompleteGenomes_RefVirus',
					dest	= "IncludeIncompleteGenomes_RefVirus",
					default	= False,
					help	= "Annotate unclassified viruses using the PPHMM and GOM databases derived from all reference viruses if True, "
						  "otherwise using those derived from complete reference genomes only. [default: %default]",
					metavar	= "BOOLEAN",
					type	= "choice",
					choices	= ["True", "False",],
	)
	#VirusAnnotationGroup.add_option('--SeqLength_Cutoff',
	#				dest	= "SeqLength_Cutoff",
	#				default	= 0,
	#				help	= "Sequences with length < LENGTH nt will be ignored [default: %default]",
	#				metavar	= "LENGTH",
	#				type	= "int",
	#				action	= "callback",
	#				callback= check_NONNEGINTEGER,
	#)
	VirusAnnotationGroup.add_option('--HMMER_N_CPUs',
					dest	= "HMMER_N_CPUs",
					default	= multiprocessing.cpu_count(),
					help	= "Number of threads (CPUs) to use in the hmmscan search. [default: %default - all threads]",
					metavar	= "THREADS",
					type	= "int",
					action	= "callback",
					callback= check_POSINTEGER,
	)
	VirusAnnotationGroup.add_option('--HMMER_C_EValue_Cutoff',
					dest	= "HMMER_C_EValue_Cutoff",
					default	= 1E-3,
					help	= "Threshold for HMM-protein similarity detection. "
						  "A hit with an E-value > E-VALUE will be ignored. [default: %default]",
					metavar	= "E-VALUE",
					type	= "float",
					action	= "callback",
					callback= check_POS,
	)
	VirusAnnotationGroup.add_option('--HMMER_HitScore_Cutoff',
					dest	= "HMMER_HitScore_Cutoff",
					default	= 0,
					help	= "Threshold for HMM-protein similarity detection. "
						  "A hit with a score < SCORE will be ignored. [default: %default]",
					metavar	= "SCORE",
					type	= "float",
					action	= "callback",
					callback= check_NONNEG,
	)
	parser.add_option_group(VirusAnnotationGroup)
	
	options, arguments = parser.parse_args()
	
	print "Input for UcfVirusAnnotator:"
	print "="*100
	print "Main input"
	print "-"*50
	print "GenomeSeqFile_UcfVirus: %s"%options.GenomeSeqFile_UcfVirus
	print "ShelveDir_UcfVirus: %s"%options.ShelveDir_UcfVirus
	print "ShelveDirs_RefVirus: %s"%options.ShelveDirs_RefVirus
	
	print "\n"
	print "Unclassified virus annotation options"
	print "-"*50
	print "IncludeIncompleteGenomes_UcfVirus: %s"%options.IncludeIncompleteGenomes_UcfVirus
	print "IncludeIncompleteGenomes_RefVirus: %s"%options.IncludeIncompleteGenomes_RefVirus	
	#print "SeqLength_Cutoff: %s"%options.SeqLength_Cutoff
	print "HMMER_N_CPUs: %s"%options.HMMER_N_CPUs
	print "HMMER_C_EValue_Cutoff: %s"%options.HMMER_C_EValue_Cutoff
	print "HMMER_HitScore_Cutoff: %s"%options.HMMER_HitScore_Cutoff
	print "="*100
	
	UcfVirusAnnotator (
		GenomeSeqFile_UcfVirus = options.GenomeSeqFile_UcfVirus,
		ShelveDir_UcfVirus = options.ShelveDir_UcfVirus,
		ShelveDirs_RefVirus = options.ShelveDirs_RefVirus,
		
		IncludeIncompleteGenomes_UcfVirus = str2bool(options.IncludeIncompleteGenomes_UcfVirus),
		IncludeIncompleteGenomes_RefVirus = str2bool(options.IncludeIncompleteGenomes_RefVirus),
		#SeqLength_Cutoff = options.SeqLength_Cutoff,
		SeqLength_Cutoff = 0,
		HMMER_N_CPUs = options.HMMER_N_CPUs,
		HMMER_C_EValue_Cutoff = options.HMMER_C_EValue_Cutoff,
		HMMER_HitScore_Cutoff = options.HMMER_HitScore_Cutoff,
		)

if __name__ == '__main__':
	main()

